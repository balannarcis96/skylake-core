//!
//! \file skl_vector_if
//!
//! \brief Extended skl_vector interface
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

#include "skl_assert"
#include "skl_vector"
#include "skl_traits/ctor"

namespace skl {
//! [ATRP] Extended interface for skl_vector<T>
template <typename _T, u64 _InitialCapacity>
class iskl_vector final {
public:
    using value_type = _T;
    using size_type  = u64;
    using atrp_type  = skl_vector<_T, _InitialCapacity>;

    //ATRP
    iskl_vector() noexcept                     = delete;
    ~iskl_vector() noexcept                    = delete;
    iskl_vector(const iskl_vector&)            = delete;
    iskl_vector& operator=(const iskl_vector&) = delete;
    iskl_vector(iskl_vector&&)                 = delete;
    iskl_vector& operator=(iskl_vector&&)      = delete;

    //! Is this vector empty
    [[nodiscard]] constexpr bool empty() const noexcept {
        return root()->empty();
    }

    //! Can this vector fit \p f_objects_count
    [[nodiscard]] constexpr bool fits(u64 f_objects_count) const noexcept {
        SKL_ASSERT(size() <= capacity());
        return (capacity() - size()) >= f_objects_count;
    }

    //! Get the vector capacity
    [[nodiscard]] constexpr u64 capacity() const noexcept {
        return root()->capacity();
    }

    //! Is this vector valid (has storage allocated)
    [[nodiscard]] constexpr bool has_storage() const noexcept {
        return root()->has_storage();
    }

    //! Get the internal buffer ptr
    [[nodiscard]] _T* data() noexcept {
        return root()->data();
    }

    //! Get the internal buffer ptr
    [[nodiscard]] const _T* data() const noexcept {
        return root()->data();
    }

    //! Get the vector size (in objects)
    [[nodiscard]] constexpr u64 size() const noexcept {
        return root()->size();
    }

    //! Set the size of the vector to \p f_new_size, allocates if necessary
    //! \remark Objects are destroyed or default constructed as needed
    //! \remark resize(0U) is same as clear()
    void resize(const u64 f_new_size) {
        if (f_new_size == 0U) {
            clear();
            return;
        }

        const auto old_size = size();

        //Allocate if necessary
        if (capacity() < f_new_size) {
            increase_buffer(f_new_size + CVectorIncreaseStep);
        }

        //Destroy objects if needed
        if constexpr (false == __is_trivially_destructible(_T)) {
            for (u64 i = f_new_size; i < old_size; ++i) {
                root()->m_start[i].~_T();
            }
        }

        //Construct objects if needed
        if constexpr (false == __is_trivially_constructible(_T)) {
            for (u64 i = old_size; i < f_new_size; ++i) {
                new (root()->m_start + i) _T();
            }
        }

        //Adjust size
        root()->m_finish = root()->m_start + f_new_size;
    }

    //! Reserve at least \p f_min_capacity in the internal buffer
    void reserve(const u64 f_min_capacity) {
        SKL_ASSERT(0U < f_min_capacity);

        if (capacity() >= f_min_capacity) {
            return;
        }

        increase_buffer(f_min_capacity + CVectorIncreaseStep);
    }

    //! Copy new object into the vector front
    void push_back(const _T& f_object) {
        auto* self = root();

        if (self->m_finish == self->m_storage_end) [[unlikely]] {
            increase_buffer(capacity() + CVectorIncreaseStep);
        }

        //Copy construct the object
        new (self->m_finish++) _T(f_object);
    }

    //! Move new object into the vector
    void emplace_back(_T&& f_object) {
        auto* self = root();

        if (self->m_finish == self->m_storage_end) [[unlikely]] {
            increase_buffer(capacity() + CVectorIncreaseStep);
        }

        //Move construct the object
        new (self->m_finish++) _T(static_cast<_T&&>(f_object));
    }

    //! Move new object into the vector
    template <typename... _Args>
    void emplace_back(_Args&&... f_args) {
        auto* self = root();

        if (self->m_finish == self->m_storage_end) [[unlikely]] {
            increase_buffer(capacity() + CVectorIncreaseStep);
        }

        //Move construct the object
        new (self->m_finish++) _T(static_cast<_T&&>(f_args)...);
    }

    //! Remove the last object
    void pop_back() noexcept(__is_nothrow_destructible(_T)) {
        SKL_ASSERT(0U < size());
        auto* self = root();

        --self->m_finish;

        if constexpr (false == __is_trivially_destructible(_T)) {
            self->m_finish->~_T();
        }
    }

    //! operator[]
    [[nodiscard]] _T& operator[](u64 f_index) noexcept {
        SKL_ASSERT(f_index < size());
        return data()[f_index];
    }

    //! operator[]
    [[nodiscard]] const _T& operator[](u64 f_index) const noexcept {
        SKL_ASSERT(f_index < size());
        return data()[f_index];
    }

    //! Convert to the base vector interface
    [[nodiscard]] operator atrp_type&() noexcept {
        return *reinterpret_cast<atrp_type*>(this);
    }

    //! Convert to the base vector interface
    [[nodiscard]] operator const atrp_type&() const noexcept {
        return *reinterpret_cast<const atrp_type*>(this);
    }

    //! Clear the vector, destroying all objects if needed
    void clear() noexcept {
        root()->clear();
    }

    //! Get ref to the last element in the vector
    [[nodiscard]] _T& back() noexcept {
        SKL_ASSERT(0U < size());
        return *(root()->m_finish - 1U);
    }

    //! Get ref to the last element in the vector
    [[nodiscard]] const _T& back() const noexcept {
        SKL_ASSERT(0U < size());
        return *(root()->m_finish - 1U);
    }

    //! Get ref to the first element in the vector
    [[nodiscard]] _T& front() noexcept {
        SKL_ASSERT(0U < size());
        return *root()->m_start;
    }

    //! Get ref to the first element in the vector
    [[nodiscard]] const _T& front() const noexcept {
        SKL_ASSERT(0U < size());
        return *root()->m_start;
    }

    //! Begin ptr into the vector buffer
    [[nodiscard]] _T* begin() noexcept {
        return root()->m_start;
    }

    //! End ptr into the vector buffer
    [[nodiscard]] _T* end() noexcept {
        return root()->m_finish;
    }

    //! Begin ptr into the vector buffer
    [[nodiscard]] const _T* begin() const noexcept {
        return root()->m_start;
    }

    //! End ptr into the vector buffer
    [[nodiscard]] const _T* end() const noexcept {
        return root()->m_finish;
    }

    //! Find \p f_target in this vector
    //! \returns end() if item is not found
    [[nodiscard]] _T* find(_T f_value) noexcept {
        for (auto& it : *this) {
            if (it == f_value) {
                return &it;
            }
        }

        return end();
    }

    //! Find \p f_target in this vector
    //! \returns end() if item is not found
    [[nodiscard]] const _T* find(_T f_value) const noexcept {
        for (auto& it : *this) {
            if (it == f_value) {
                return &it;
            }
        }

        return end();
    }

    //! Find \p f_target in this vector
    //!
    //! Usage:
    //! find_if([](const _T& f_item) static noexcept {
    //!     return true;
    //! });
    //!
    //! \returns end() if item is not found
    template <typename _TFunctor>
    [[nodiscard]] const _T* find_if(const _TFunctor& f_predicate) const {
        for (auto& it : *this) {
            if (f_predicate(it)) {
                return &it;
            }
        }

        return end();
    }

    //! Find \p f_target in this vector
    //!
    //! Usage:
    //! find_if([](const _T& f_item) static noexcept {
    //!     return true;
    //! });
    //!
    //! \returns end() if item is not found
    template <typename _TFunctor>
    [[nodiscard]] _T* find_if(const _TFunctor& f_predicate) {
        for (auto& it : *this) {
            if (f_predicate(it)) {
                return &it;
            }
        }

        return end();
    }

    //! Find \p f_target in this vector
    //!
    //! Usage:
    //! find_if_static<decltype([](const _T& f_item) static noexcept {
    //!     return true;
    //! })>();
    //!
    //! \returns end() if item is not found
    template <typename _TStaticFunctor>
    [[nodiscard]] const _T* find_if_static() const {
        for (auto& it : *this) {
            if (_TStaticFunctor::operator()(it)) {
                return &it;
            }
        }

        return end();
    }

    //! Find \p f_target in this vector
    //!
    //! Usage:
    //! find_if_static<decltype([](const _T& f_item) static noexcept {
    //!     return true;
    //! })>();
    //!
    //! \returns end() if item is not found
    template <typename _TStaticFunctor>
    [[nodiscard]] _T* find_if_static() {
        for (auto& it : *this) {
            if (_TStaticFunctor::operator()(it)) {
                return &it;
            }
        }

        return end();
    }

    //! Erases the element at \p f_index
    //! \remark Asserts that \p f_index < size()
    //! \remark If the size() > 1 and f_index is not the last element, the last element is moved to the erased slot
    void back_swap_erase(u64 f_index) noexcept(__is_nothrow_destructible(_T) && __is_nothrow_constructible(_T, _T&&)) {
        const auto _size = size();
        SKL_ASSERT(f_index < _size);

        //1. Destroy the erased object if not trivial
        if constexpr (false == __is_trivially_destructible(_T)) {
            (*this)[f_index].~_T();
        }

        //2. Move the back into the erased slot if necessary
        if ((_size > 1U) && (f_index < (_size - 1U))) {
            auto* last = root()->m_finish - 1U;
            new (&(*this)[f_index]) _T(static_cast<_T&&>(*last));

            //3. Destroy the last element if needed
            if constexpr (false == __is_trivially_destructible(_T)) {
                last->~_T();
            }
        }

        //4. Pop last item
        --root()->m_finish;
    }

private:
    SKL_NOINLINE void increase_buffer(u64 f_new_capacity) {
        auto* self = root();

        //Save old buffer and size
        auto*      old_buffer = self->m_start;
        const auto old_size   = self->size();

        //Allocate new buffers
        self->initialize(f_new_capacity, old_size);
        SKL_ASSERT(has_storage());

        auto* new_buffer = self->m_start;

        //Copy or move existing objects into the new buffer (if any)
        if constexpr (__is_trivially_copyable(_T)) {
            if (0U < old_size) {
                skl_vector_memcpy(new_buffer, old_buffer, old_size * sizeof(_T));
            }
        } else {
            if constexpr (is_move_constructible<_T>()) {
                for (u64 i = 0U; i < old_size; ++i) {
                    new (&new_buffer[i]) _T(static_cast<_T&&>(old_buffer[i]));
                }
            } else {
                for (u64 i = 0U; i < old_size; ++i) {
                    new (&new_buffer[i]) _T(old_buffer[i]);
                }
            }

            if constexpr (false == __is_trivially_destructible(_T)) {
                for (u64 i = 0U; i < old_size; ++i) {
                    old_buffer[i].~_T();
                }
            }
        }

        //Free old buffer
        if (nullptr != old_buffer) {
            skl_vector_free(old_buffer);
        }
    }

    //ATPR
    [[nodiscard]] skl_vector<_T>* root() noexcept {
        return reinterpret_cast<skl_vector<_T>*>(this);
    }
    [[nodiscard]] const skl_vector<_T>* root() const noexcept {
        return reinterpret_cast<const skl_vector<_T>*>(this);
    }
};
} // namespace skl
