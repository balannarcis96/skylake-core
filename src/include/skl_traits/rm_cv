//!
//! \file skl_rm_cv
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

namespace skl {
template <typename T>
struct cv_helper {
    using raw_type                    = T;
    using type                        = T;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = false;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<const T> {
    using raw_type                    = T;
    using type                        = T;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = false;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<volatile T> {
    using raw_type                    = T;
    using type                        = T;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = true;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<const volatile T> {
    using raw_type                    = T;
    using type                        = T;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = true;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<T*> {
    using raw_type                    = T;
    using type                        = T*;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = false;
    static constexpr bool is_ptr      = true;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<const T*> {
    using raw_type                    = T;
    using type                        = T*;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = false;
    static constexpr bool is_ptr      = true;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<volatile T*> {
    using raw_type                    = T;
    using type                        = T*;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = true;
    static constexpr bool is_ptr      = true;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<const volatile T*> {
    using raw_type                    = T;
    using type                        = T*;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = true;
    static constexpr bool is_ptr      = true;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<T&> {
    using raw_type                    = T;
    using type                        = T&;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = false;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = true;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<const T&> {
    using raw_type                    = T;
    using type                        = T&;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = false;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = true;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<volatile T&> {
    using raw_type                    = T;
    using type                        = T&;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = true;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = true;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<const volatile T&> {
    using raw_type                    = T;
    using type                        = T&;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = true;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = true;
    static constexpr bool is_rref     = false;
};

template <typename T>
struct cv_helper<T&&> {
    using raw_type                    = T;
    using type                        = T&&;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = false;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = true;
};

template <typename T>
struct cv_helper<const T&&> {
    using raw_type                    = T;
    using type                        = T&&;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = false;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = true;
};

template <typename T>
struct cv_helper<volatile T&&> {
    using raw_type                    = T;
    using type                        = T&&;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = true;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = true;
};

template <typename T>
struct cv_helper<const volatile T&&> {
    using raw_type                    = T;
    using type                        = T&&;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = true;
    static constexpr bool is_ptr      = false;
    static constexpr bool is_ref      = false;
    static constexpr bool is_rref     = true;
};

template <typename T>
using rm_cv_t = typename cv_helper<T>::type;
} // namespace skl
