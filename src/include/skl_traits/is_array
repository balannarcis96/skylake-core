//!
//! \file is_array
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

namespace skl {
template <typename T>
struct is_array {
    using type                        = T;
    static constexpr bool value       = false;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = false;
};

template <typename T, unsigned long N>
struct is_array<T[N]> {
    using type                        = T;
    static constexpr bool value       = true;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = false;
};

template <typename T, unsigned long N>
struct is_array<const T[N]> {
    using type                        = T;
    static constexpr bool value       = true;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = false;
};

template <typename T, unsigned long N>
struct is_array<volatile T[N]> {
    using type                        = T;
    static constexpr bool value       = true;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = true;
};

template <typename T, unsigned long N>
struct is_array<const volatile T[N]> {
    using type                        = T;
    static constexpr bool value       = true;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = true;
};

template <typename T>
struct is_array<T[]> {
    using type                        = T;
    static constexpr bool value       = true;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = false;
};

template <typename T>
struct is_array<const T[]> {
    using type                        = T;
    static constexpr bool value       = true;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = false;
};

template <typename T>
struct is_array<volatile T[]> {
    using type                        = T;
    static constexpr bool value       = true;
    static constexpr bool is_const    = false;
    static constexpr bool is_volatile = true;
};

template <typename T>
struct is_array<const volatile T[]> {
    using type                        = T;
    static constexpr bool value       = true;
    static constexpr bool is_const    = true;
    static constexpr bool is_volatile = true;
};

template <typename T>
constexpr bool is_array_v = is_array<T>::value;
} // namespace skl
