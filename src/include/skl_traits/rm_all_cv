//!
//! \file rm_all_cv
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

/*
    [const/volatile](*) T                      -> type: T   | raw_type: T
    [const/volatile](*) T[]                    -> type: T*  | raw_type: T
    [const/volatile](*) T[N]                   -> type: T*  | raw_type: T
    [const/volatile](*) T* [const/volatile](*) -> type: T*  | raw_type: T
    [const/volatile](*) T&                     -> type: T&  | raw_type: T
    [const/volatile](*) T&&                    -> type: T&& | raw_type: T

    (*) [const/volatile] - none, any or both
*/

namespace skl {
//Raw type no cv pass

//@TODO optimize, remove denundancies via inheritance

template <typename T>
struct full_cv_helper {
    using raw_type                        = T;
    using type                            = T;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};

// Raw type cv pass
template <typename T>
struct full_cv_helper<const T> {
    using raw_type                        = T;
    using type                            = T;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<volatile T> {
    using raw_type                        = T;
    using type                            = T;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const volatile T> {
    using raw_type                        = T;
    using type                            = T;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};

// No cv pass
template <typename T>
struct full_cv_helper<T*> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<T* const> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = true;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<T* volatile> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = true;
};
template <typename T>
struct full_cv_helper<T* const volatile> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = true;
    static constexpr bool is_ptr_volatile = true;
};

// Const pass
template <typename T>
struct full_cv_helper<const T*> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const T* const> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = true;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const T* volatile> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = true;
};
template <typename T>
struct full_cv_helper<const T* const volatile> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = true;
    static constexpr bool is_ptr_volatile = true;
};

// Volatile pass
template <typename T>
struct full_cv_helper<volatile T*> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<volatile T* const> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = true;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<volatile T* volatile> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = true;
};
template <typename T>
struct full_cv_helper<volatile T* const volatile> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = true;
    static constexpr bool is_ptr_volatile = true;
};

// Const volatile pass
template <typename T>
struct full_cv_helper<const volatile T*> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const volatile T* const> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = true;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const volatile T* volatile> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = true;
};
template <typename T>
struct full_cv_helper<const volatile T* const volatile> {
    using raw_type                        = T;
    using type                            = T*;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ptr          = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = true;
    static constexpr bool is_ptr_volatile = true;
};

// Ref pass
template <typename T>
struct full_cv_helper<T&> {
    using raw_type                        = T;
    using type                            = T&;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = true;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const T&> {
    using raw_type                        = T;
    using type                            = T&;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = true;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<volatile T&> {
    using raw_type                        = T;
    using type                            = T&;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = true;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const volatile T&> {
    using raw_type                        = T;
    using type                            = T&;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = true;
    static constexpr bool is_rref         = false;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};

// R-Ref pass
template <typename T>
struct full_cv_helper<T&&> {
    using raw_type                        = T;
    using type                            = T&&;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = true;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const T&&> {
    using raw_type                        = T;
    using type                            = T&&;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = false;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = true;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<volatile T&&> {
    using raw_type                        = T;
    using type                            = T&&;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = false;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = true;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};
template <typename T>
struct full_cv_helper<const volatile T&&> {
    using raw_type                        = T;
    using type                            = T&&;
    static constexpr bool is_ptr          = false;
    static constexpr bool is_const        = true;
    static constexpr bool is_volatile     = true;
    static constexpr bool is_ref          = false;
    static constexpr bool is_rref         = true;
    static constexpr bool is_ptr_const    = false;
    static constexpr bool is_ptr_volatile = false;
};

template <typename T>
using rm_all_cv_t = typename full_cv_helper<T>::type;

template <typename T>
using rm_all_cv_raw_t = typename full_cv_helper<T>::raw_type;
} // namespace skl
