//!
//! \file is_cstring
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

#include "skl_traits/is_array"

namespace skl {
template <typename _Type, typename _CharType = char>
[[nodiscard]] consteval bool is_cstring() noexcept {
    if constexpr (__is_same(_Type, _CharType*)
                  || __is_same(_Type, const _CharType*)
                  || __is_same(_Type, volatile _CharType*)
                  || __is_same(_Type, const volatile _CharType*)
                  || (is_array_v<_Type> && __is_same(is_array<_Type>::type, _CharType))) {
        return true;
    } else {
        return false;
    }
}

template <typename _Type, typename _CharType = char>
constexpr bool is_cstring_v = is_cstring_v<_Type, _CharType>();
} // namespace skl
