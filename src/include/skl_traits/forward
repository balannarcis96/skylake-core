//!
//! \file forward
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

/*
 * To minimise headers to absolute minimal size, 
 * i've copied std::formad implementation here
 */

namespace skl {
namespace skl_forward {
    /// remove_reference
    template <typename _Tp>
    struct remove_reference {
        typedef _Tp type;
    };

    template <typename _Tp>
    struct remove_reference<_Tp&> {
        typedef _Tp type;
    };

    template <typename _Tp>
    struct remove_reference<_Tp&&> {
        typedef _Tp type;
    };
} // namespace skl_forward

//! \brief  Forward an lvalue.
//! \return The parameter cast to the specified type.
//!
//! This function is used to implement "perfect forwarding".
template <typename _Tp>
[[nodiscard]] constexpr _Tp&& skl_fwd(typename skl_forward::remove_reference<_Tp>::type& __t) noexcept { return static_cast<_Tp&&>(__t); }

//! \brief  Forward an rvalue.
//! \return The parameter cast to the specified type.
//!
//! This function is used to implement "perfect forwarding".
template <typename _Tp>
[[nodiscard]] constexpr _Tp&& skl_fwd(typename skl_forward::remove_reference<_Tp>::type&& __t) noexcept {
    // static_assert(!std::is_lvalue_reference<_Tp>::value, "skl::skl_result_internals::forward must not be used to convert an rvalue to an lvalue");
    return static_cast<_Tp&&>(__t);
}
} // namespace skl
