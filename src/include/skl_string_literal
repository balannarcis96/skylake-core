//!
//! \file skl_string_literal
//!
//! \brief string literal constexpr type
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

namespace skl {
using str_literal_size_t = unsigned long long;

template <str_literal_size_t _N>
struct str_literal_t {
    static constexpr str_literal_size_t CBufferLength      = _N;
    static constexpr str_literal_size_t CBufferBytesLength = _N;
    static constexpr str_literal_size_t CLength            = _N - 1;

    constexpr explicit str_literal_t(const char (&f_string)[_N]) noexcept {
        for (str_literal_size_t i = 0U; i < _N; ++i) {
            m_value[i] = f_string[i];
        }
    }

    [[nodiscard]] constexpr const char* value() const noexcept { return m_value; }

    char m_value[_N];
};
} // namespace skl
