//!
//! \file skl_sguid
//!
//! \brief small guid
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

#include "skl_buffer_view"

namespace skl {
//! Simple, 4 random bytes small-guid
//! \remark Default constructs to the null-guid (4 zero bytes)
struct SGUID {
    static constexpr byte CSize = 4U;

    //! Default construct as null-guid
    constexpr SGUID() noexcept
        : m_data{0U, 0U, 0U, 0U} {
    }

    //! Construct with specific bytes
    constexpr SGUID(byte f_bytes[CSize]) noexcept
        : m_data{f_bytes[0U], f_bytes[1U], f_bytes[2U], f_bytes[3U]} {
    }

    //! Construct with specific bytes
    constexpr SGUID(byte f_byte_1, byte f_byte_2, byte f_byte_3, byte f_byte_4) noexcept
        : m_data{f_byte_1, f_byte_2, f_byte_3, f_byte_4} {
    }

    //! Construct with specific u32 value
    constexpr SGUID(u32 f_value) noexcept
        : m_data{static_cast<byte>((f_value >> 24u) & 0xffu),
                 static_cast<byte>((f_value >> 16u) & 0xffu),
                 static_cast<byte>((f_value >> 8u) & 0xffu),
                 static_cast<byte>(f_value & 0xffu)} {
    }

    constexpr SGUID(const SGUID&) noexcept  = default;
    SGUID& operator=(const SGUID&) noexcept = default;
    SGUID(SGUID&&) noexcept                 = default;
    SGUID& operator=(SGUID&&) noexcept      = default;
    constexpr ~SGUID() noexcept             = default;

    [[nodiscard]] constexpr u32 raw() const noexcept {
        return *reinterpret_cast<const u32*>(m_data);
    }

    [[nodiscard]] constexpr bool operator==(const SGUID& f_other) const noexcept {
        return raw() == f_other.raw();
    }

    [[nodiscard]] constexpr bool operator!=(const SGUID& f_other) const noexcept {
        return raw() != f_other.raw();
    }

    [[nodiscard]] constexpr bool is_null() const noexcept {
        return *reinterpret_cast<const u32*>(m_data) == u32(0U);
    }

    void to_string(skl_buffer_view f_target_buffer) const noexcept;

    [[nodiscard]] constexpr byte operator[](u64 f_index) const noexcept {
        return m_data[f_index];
    }

private:
    byte m_data[CSize]; //!< The 4 bytes of the small-guid
};

//! [LibInit][ThreadLocal] Make new small-guid
[[nodiscard]] SGUID make_sguid() noexcept;

//! [LibInit][ThreadLocal] Make new small-guid
//! \remark Faster, less "collision-safe"
[[nodiscard]] SGUID make_sguid_fast() noexcept;

//! Make new small-guid
//! \remark Creates new instance of SklRand on each call
[[nodiscard]] SGUID g_make_sguid() noexcept;

//! Make new small-guid
//! \remark Creates new instance of SklRand on each call
//! \remark Faster, less "collision-safe"
[[nodiscard]] SGUID g_make_sguid_fast() noexcept;
} // namespace skl

namespace skl {
constexpr SGUID SGUID_Zero{};                                          //!< Null SGUID
constexpr SGUID SGUID_Max{u8(0xffu), u8(0xffu), u8(0xffu), u8(0xffu)}; //!< Max SGUID

struct sguid_hash {
    [[nodiscard]] static u64 operator()(const skl::SGUID& f_guid) noexcept {
        return static_cast<u64>(f_guid.raw());
    }
};
} // namespace skl
