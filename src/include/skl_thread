//!
//! \file skl_thread
//!
//! \license Licensed under the MIT License. See LICENSE for details.
//!
#pragma once

#include <functional>
#include <memory>
#include <latch>

#include "skl_int"
#include "skl_result"
#include "skl_atomic"
#include "skl_pair"
#include "skl_assert"
#include "skl_string_view"

namespace skl {
using thread_affinity_t = pair<i16, i16>;

//Thread handle
using thread_t = u64;

constexpr thread_t CInvalidThreadHandle = 0U;

//! Thread abstraction
//!
//! ! NOTE ! All the code executed as part of the
//!          thread handler can safely use any skl core lib apis.
//!          The thread handler will init and deinit the core lib internaly.
//!
class SKLThread {
public:
    using exec_handler_t = std::function<i32(void)>;

    SKLThread() noexcept = default;

    explicit SKLThread(skl_string_view f_name) noexcept
        : m_name{0} {
        f_name.copy_and_terminate(m_name);
        m_name_view = skl_string_view::from_cstr(m_name);
    }

    SKLThread(const SKLThread&)            = delete;
    SKLThread& operator=(const SKLThread&) = delete;
    SKLThread& operator=(SKLThread&&)      = delete;

    //Can only move construct
    SKLThread(SKLThread&& f_other) noexcept
        : m_handler(std::move(f_other.m_handler))
        , m_handle(f_other.m_handle.load())
        , m_result_value(f_other.m_result_value.load())
        , m_name(0) {
        f_other.name().copy(m_name);
        f_other.m_name[0U] = 0;
        m_name_view        = skl_string_view::from_cstr(m_name);
        (void)f_other.m_handle.exchange(CInvalidThreadHandle);
    }

    ~SKLThread() noexcept;

    //! Create this thread
    //! \param CPUIndexRange 0 based index of cores this thread is to be scheduled on(globally indexed)
    //! \note CPUIndexRange - (-1, -1) = any core/no affinity - default
    //! \note CPUIndexRange - (x, x) = same index in range to force scheduling on a spcific core
    [[nodiscard]] skl_status create(thread_affinity_t f_cpu_index_range = {-1, -1}) noexcept;

    //! Set the thread affinity for the calling thread
    //! \param CPUIndexRange 0 based index of cores this thread is to be scheduled on(globally indexed)
    //! \note CPUIndexRange - (-1, -1) = any core/no affinity - default
    //! \note CPUIndexRange - (x, x) = same index in range to force scheduling on a spcific core
    [[nodiscard]] static skl_status set_affinity(thread_affinity_t f_cpu_index_range) noexcept;

    //! Get the set of cpu indices the process is allowed to use
    //! \returns SKL_ERR_FAIL if failed to get the core count or affinity mask
    //! \returns SKL_ERR_OVERFLOW if \p f_core_indices_buffer does not fit the available core indices count
    [[nodiscard]] static skl_result<u16> get_usable_cores(u16* f_core_indices_buffer, u16 f_max_indices) noexcept;

    //! Join this thread
    [[nodiscard]] skl_status join() noexcept;

    //! Get the thread name
    [[nodiscard]] skl_string_view name() const noexcept {
        return m_name_view;
    }

    //! Detach this thread
    //! \note Cannot be joined after this call
    skl_status detach() noexcept;

    //! Can this thread be joined
    [[nodiscard]] bool joinable() const noexcept {
        return m_bIsJoinable;
    }

    //! Get the native handle of this thread
    [[nodiscard]] thread_t handle() const noexcept {
        return m_handle;
    }

    //! Set the execution handler functor
    //! \note i32(SKL_CDECL*)(void) noexcept
    template <typename TFunctor>
    void set_handler(TFunctor&& f_functor) noexcept {
        m_handler = std::forward<TFunctor>(f_functor);
    }

    //! Get the execution result
    //! \note Make sure that the thread finished execution (joined)
    [[nodiscard]] i32 result() const noexcept {
        return m_result_value.load();
    }

private:
    //! [Internal] Call the execution handler functor
    [[nodiscard]] i32 call_handler() noexcept {
        SKL_ASSERT(nullptr != m_handler);
        return m_handler();
    }

private:
    exec_handler_t                     m_handler;                      //!< Functor called by the spawned thread
    std::relaxed_value<thread_t>       m_handle{CInvalidThreadHandle}; //!< Thread native handle
    std::relaxed_value<skl_status_raw> m_result_value{SKL_SUCCESS};    //!< Result value after execution ended
    std::unique_ptr<std::latch>        m_start_sync{nullptr};          //!< Start sync latch
    std::relaxed_value<bool>           m_bRun{false};                  //!< Internal run flag
    std::relaxed_value<bool>           m_bIsJoinable{true};            //!< Is this thread joinable
    char                               m_name[128U]{"SKLThread"};      //!< Name of the thread
    skl_string_view                    m_name_view;                    //!< Name view

    friend void* thread_run_proxy(void*) noexcept;
};
} // namespace skl
